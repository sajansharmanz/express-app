// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id                  String           @id @default(cuid())
    email               String           @unique
    password            String
    failedLoginAttempts Int              @default(0)
    status              UserStatus       @default(ENABLED)
    profile             Profile?
    roles               Role[]
    tokens              Token[]
    posts               Post[]
    comments            Comment[]
    reactions           Reaction[]
    ipAddresses         UserIPTracking[]
    devices             UserDevice[]
    passwordResetToken  String?
    createdAt           DateTime         @default(now())
    updatedAt           DateTime         @updatedAt
}

model Profile {
    id        String    @id @default(cuid())
    firstName String?
    lastName  String?
    avatar    File?
    skinTone  SkinTone? @default(NONE)
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String    @unique
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model File {
    id           String   @id @default(cuid())
    originalname String
    encoding     String?
    mimetype     String
    size         Int
    base64String String
    profile      Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
    profileId    String?  @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
}

model Reaction {
    id        String       @id @default(cuid())
    reaction  ReactionType
    skinTone  SkinTone     @default(NONE)
    user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    comment   Comment?     @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String?
    post      Post?        @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String?
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt
}

model Comment {
    id        String           @id @default(cuid())
    author    User             @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    status    CommentStatus    @default(DRAFT)
    post      Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String           @unique
    reactions Reaction[]
    versions  CommentVersion[]
    createdAt DateTime         @default(now())
    updatedAt DateTime         @updatedAt
}

model CommentVersion {
    id        String   @id @default(cuid())
    content   String
    comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)
    commentId String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserIPTracking {
    id        String   @id @default(cuid())
    ip        String
    lon       Float
    lat       Float
    continent String
    country   String
    region    String
    city      String
    timezone  String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model UserDevice {
    id              String   @id @default(cuid())
    name            String?
    model           String
    platform        String
    operatingSystem String
    osVersion       String
    manufacturer    String
    user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId          String
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

model Token {
    id        String   @id @default(cuid())
    token     String   @unique
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Post {
    id        String        @id @default(cuid())
    author    User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
    authorId  String
    status    PostStatus    @default(DRAFT)
    comments  Comment[]
    reactions Reaction[]
    versions  PostVersion[]
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
}

model PostVersion {
    id        String   @id @default(cuid())
    content   String
    post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
    postId    String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Role {
    id          String       @id @default(cuid())
    name        String       @unique
    description String?
    system      Boolean      @default(false)
    permissions Permission[]
    users       User[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Permission {
    id          String   @id @default(cuid())
    name        String   @unique
    description String?
    roles       Role[]
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model SiteSettings {
    id              String   @id @default(cuid())
    postReviews     Boolean  @default(false)
    commentReviews  Boolean  @default(false)
    maintenanceMode Boolean  @default(false)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}

enum UserStatus {
    ENABLED
    DISABLED
    LOCKED
    BANNED
}

enum PostStatus {
    DRAFT
    PENDING_REVIEW
    PUBLISHED
    ARCHIVED
}

enum CommentStatus {
    DRAFT
    PENDING_REVIEW
    PUBLISHED
    CENSORED
}

enum ReactionType {
    LIKE
    DISLIKE
    LOVE
    LAUGH
    SAD
    ANGRY
    CURIOUS
    SUPRISED
    SUPPORT
    INSIGHTFUL
}

enum SkinTone {
    NONE
    DARK
    MEDIUM_DARK
    MEDIUM
    MEDIUM_LIGHT
    LIGHT
}
